apply plugin: 'com.android.application'

android {
    compileSdkVersion 31
    ndkVersion "21.0.6113669"
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionName "1.5.0"
        versionCode 18
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    signingConfigs {
        release {
            storeFile project.hasProperty("keystorePath") ? file(project.property("keystorePath")) : null
            storePassword project.findProperty("keystorePass")
            keyAlias project.findProperty("keyAlias")
            keyPassword project.findProperty("keyPass")
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            def hasSigningParameters = project.hasProperty("keystorePath") && project.property("keystorePath") != "" &&
                    project.hasProperty("keyAlias") && project.property("keyAlias") != "" &&
                    project.hasProperty("keystorePass") &&
                    project.hasProperty("keyPass")
            signingConfig hasSigningParameters ? signingConfigs.release : null
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'com.google.guava:guava:28.0-android'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'net.java.dev.jna:jna:5.7.0@aar'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.61'
    implementation 'ru.rutoken:pkcs11jna:4.0.0@jar'
}

def requireFileInDirectory(String directory, String file) {
    if (fileTree(dir: directory, include: '**/' + file).isEmpty()) {
        throw new GradleException('Not found ' + file + ' in ' + directory + ' directory')
    }
}

def copyFile(String file, String sourcePath, String destinationPath) {
    try {
        copy {
            include file
            from sourcePath
            into destinationPath
        }
    } catch (ignored) {
        System.println("Could not copy file: " + file)
    }
}

def copyJniLibs(String arch, String jniArch) {
    def jniLibs = "./src/main/jniLibs/$jniArch"

    if (new File("$rootDir/external").exists()) {
        copyFile('librtpkcs11ecp.so', "../external/pkcs11ecp/android-$arch/lib", jniLibs)
    } else { // SDK path
        copyFile('librtpkcs11ecp.so', "../../../android-$arch/lib", jniLibs)
    }

    requireFileInDirectory(jniLibs, 'librtpkcs11ecp.so')
}

preBuild.doLast {
    copyJniLibs('armv7a', 'armeabi-v7a')
    copyJniLibs('arm64', 'arm64-v8a')

    if (new File("$rootDir/external").exists()) {
        copyFile('rtpcsc*.aar', '../external/rtpcsc/java/', 'libs')
    } else { // SDK path
        copyFile('rtpcsc*.aar', "../../../../pcsc", "libs")
    }

    requireFileInDirectory('libs', 'rtpcsc*.aar')
}
